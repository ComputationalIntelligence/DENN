variable
{
    //info
    workers threads()+1
    seed date("%S%H%d%m%Y")
    //dataset
    batch 200
    batch_size $batch
    batch_offset $batch
    input "datasets/mnist_normalized.db.gz"
    validation true
    //denn
    gens 1500
    sub_gens $batch / 10
    np 50//28*28
    clamp 1
    crossover interm
    //output
    output "JADE_MNIST.json"
    stream "::cout"
    // compute test
    compute_test_per_pass false
}

//Init
args 
{
   //threads and seed
   threads_pop $workers
   seed $seed
   output "results/" + $output
   runtime_output_file $stream
}

//Batch info
args
{
   dataset $input
   batch_size $batch_size
   batch_offset $batch_offset
   use_validation $validation 
   compute_test_per_pass $compute_test_per_pass
   reval_pop_on_batch true
}

//network
network
{
    conv[28 28, 
         /* Kernel: */ 5 5 4 /* Slice */ 2 /* pad */ 2 2]
    relu
    maxp[2 2 2]
    conv[/* Kernel: */ 5 5 16 /* Slice */ 1 /* pad */ 2 2]
    relu
    maxp[2 2 2]
    fc[32]
    relu
    fc[/*auto*/]
    softmax
}

//DE Params
args 
{
    //generations + np
    generations $gens
    sub_gens $sub_gens
    number_parents $np
    //init individuals
    distribution normal {
        normal_mu 0
        normal_sigma 0.01
    }
    clamp_max  $clamp
    clamp_min  -$clamp

    //DE type
    evolution_method JADE 
    {
        //jade params
        archive_size 50 //$np*10
        //mutations
        mutation curr_p_best
        //crossover
        crossover $crossover
    }

}
