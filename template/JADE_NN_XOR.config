//info
var workers threads()+1, seed date("%S%H%d%m%Y")
//dataset
var
{
    validation true
    validation_at_end false
    force_cpval false
    xor_size 6 
    nnodes 2
    input  ($validation | !$validation_at_end) & !$force_cpval ? 
           "datasets/xor"+ str($xor_size) +".db.gz" :
           "datasets/xor"+ str($xor_size) +"_cpval.db.gz" 
    batch 100
    batch_size $batch
    batch_offset $batch
}
//denn
var
{
    gens 4000
    sub_gens 10
    //np 
    //coevolution
    np 100
    npp 10.0
    conet_build "best"
    conet_split "matrix"
    conet_select "best"
    //others
    clamp 10
    mask true
    maskf 0.1
    mutation degl
    crossover bin
    compute_test_per_pass false
    reval true
}
//output
var output "JADE_NN_XOR"+ str($xor_size) +".json",
    full_output "results/" + $output, 
    stream "::cout"
//out intermediate results
var intermediate false,
    intermediate_type ".json",
    intermediate_name get_basename($full_output),
    intermediate_dir get_directory($full_output) ? get_directory($full_output) : "./",
    intermediate_output $intermediate_dir + "/" + $intermediate_name + $intermediate_type

////////////////////////////////////////////////////////
//network
network
{
    fc[$nnodes] sigmoid
    fc[$nnodes] sigmoid
    fc[$nnodes] sigmoid
    fc[]  softmax
}

//Batch info
dataset $input
batch_size $batch_size
batch_offset $batch_offset
use_validation $validation 
last_with_validation $validation_at_end
compute_test_per_pass $compute_test_per_pass
reval_pop_on_batch $reval

conet_build $conet_build
conet_split $conet_split
conet_select $conet_select

//DE Params
evolution_method JADE 
{
    //jade params
    archive_size 200
    //mutations
    mutation $mutation
    //crossover
    crossover $crossover
}
generations $gens
sub_gens $sub_gens
number_parents $np
number_parents_percentage $npp
//todo: use_mask $mask
//todo: mask_factor $maskf

//init individuals
distribution uniform {
    uniform_min -$clamp
    uniform_max  $clamp
}
clamp_max  $clamp
clamp_min  -$clamp


//threads, seed, and output
threads_pop $workers
seed $seed
output $full_output
runtime_output_file $stream
//todo: save_intermediate $intermediate
//todo: intermediate_output $intermediate_output
