//info
var workers threads()+1, seed date("%S%H%d%m%Y")
//dataset
var
{
    validation true
    validation_at_end false
    force_cpval false
    binary true
    xor_size 6 
    nnodes 2
    input  ($validation | !$validation_at_end) & !$force_cpval ? 
           "datasets/xor"+ str($xor_size) + ( $binary ? "_bin." : "." ) +"db.gz" :
           "datasets/xor"+ str($xor_size) +"_cpval" + ( $binary ? "_bin." : "." ) + "db.gz" 
    batch 20
    batch_size $batch
    batch_offset $batch
}
//denn
var
{
    gens 4000
    sub_gens 10
    np 20
    //others
    clamp sqrt($xor_size) 
    //xavier rand
    rand 1.0 / sqrt($xor_size) 
    //
    mask false
    maskf 0.1
    maskb true
    mutation curr_p_best
    crossover interm
    compute_test_per_pass false
    reval true
}
//output
var output "JADE_NN_XOR"+ str($xor_size) +".json",
    full_output "results/" + $output, 
    stream "::cout"
//out intermediate results
var intermediate false,
    intermediate_pop_var false,
    intermediate_type ".json",
    intermediate_name get_basename($full_output),
    intermediate_dir get_directory($full_output) ? get_directory($full_output) : "./",
    intermediate_output $intermediate_dir + "/" + $intermediate_name + $intermediate_type

////////////////////////////////////////////////////////
//network
network
{    
    /*
    fc[$nnodes] sigmoid //dropout[0.25]
    fc[$nnodes] sigmoid 
    fc[$nnodes] sigmoid 
    fc[]  ($binary ? sigmoid : softmax)
    */
    
    fc[$nnodes] leaky_relu[0.2]
    fc[$nnodes] leaky_relu[0.2] 
    fc[$nnodes] leaky_relu[0.2] 
    fc[]  leaky_relu[0.2] 
}

//Batch info
dataset $input
batch_size $batch_size
batch_offset $batch_offset
use_validation $validation 
last_with_validation $validation_at_end
compute_test_per_pass $compute_test_per_pass
reval_pop_on_batch $reval

//DE Params
evolution_method SHADE 
{
    //jade params
    archive_size 200
    //mutations
    mutation $mutation
    //crossover
    crossover $crossover
}
generations $gens
sub_gens $sub_gens
number_parents $np
use_mask $mask
mask_factor $maskf
mask_change_the_bests $maskb 

//init individuals
distribution uniform {
    uniform_min -$rand
    uniform_max  $rand
}
clamp_max  $clamp
clamp_min  -$clamp


//threads, seed, and output
threads_pop $workers
seed $seed
output $full_output
runtime_output_file $stream
save_intermediate $intermediate
intermediate_output $intermediate_output
save_population_var $intermediate_pop_var
population_var_output $intermediate_output
