//info
var workers threads()+1, seed date("%S%H%d%m%Y")
//dataset
var
{
    input "datasets/mnist_normalized.db.gz"
    batch 200
    batch_size $batch
    batch_offset $batch
}
//denn
var
{
    gens 1500
    sub_gens $batch / 10
    np 28*28
    clamp 1
    crossover interm
    mutation curr_p_best
    mask true
    maskf 0.1
    maskb  true
    //using of dataset
    validation true
    reval_pop true
    validation_at_end true
    compute_test_per_pass false
}
//output
var output "JADE_NN_MNIST.json", 
    full_output "results/" + $output, 
    stream "::cout"
//out intermediate results
var intermediate false,
    intermediate_type ".json",
    intermediate_output get_directory($full_output) + "/" + get_basename($full_output) + $intermediate_type
////////////////////////////////////////////////////////
//network
network
{
    fc[/*auto*/] sigmoid
    softmax
}

//Batch info
dataset $input
batch_size $batch_size
batch_offset $batch_offset
use_validation $validation 
last_with_validation $validation_at_end
compute_test_per_pass $compute_test_per_pass
reval_pop_on_batch $reval_pop

//DE Params
evolution_method JADE 
{
    //jade params
    archive_size 0
    //mutations
    mutation $mutation
    //crossover
    crossover $crossover
}
generations $gens
sub_gens $sub_gens
number_parents $np
use_mask $mask
mask_factor $maskf
mask_change_the_bests $maskb

//init individuals
distribution uniform {
    uniform_min -$clamp
    uniform_max  $clamp
}
clamp_max  $clamp
clamp_min  -$clamp


//threads, seed, and output
threads_pop $workers
seed $seed
output $full_output
runtime_output_file $stream
save_intermediate $intermediate
intermediate_output $intermediate_output